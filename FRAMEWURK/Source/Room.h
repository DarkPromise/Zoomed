#ifndef ROOM_H
#define ROOM_H

#include "Map.h"

#include <vector>
#include <iostream>

enum ROOM_TYPE
{
	ROOM_NULL,

	ROOM_MAINMENU,

	ROOM_TESTPUZZLE,

	ROOM_MECH,

	ROOM_FRIENDS_TUTORIAL,
	ROOM_FRIENDS_CLASSROOM_SYMMETRY,
	ROOM_FRIENDS_TOILET,
	ROOM_FRIENDS_ROOM_ONE,
	ROOM_FRIENDS_ROOM_TWO,
	ROOM_FRIENDS_ROOM_THREE,

	ROOM_TUTORIAL_SIGHT,
	ROOM_TWO_01_SIGHT,
	ROOM_TWO_02_SIGHT,
	ROOM_THREE_01_SIGHT,
	ROOM_THREE_02_SIGHT,
	ROOM_THREE_03_SIGHT,

	ROOM_SCHOOL_MAIN,

	ROOM_DUCKS,
	ROOM_MIRROR,
	ROOM_OMGPLEASEADDTYPES,

	ROOM_TOTAL = ROOM_OMGPLEASEADDTYPES
};

enum EXIT_DIRECTION
{
	EXIT_NULL,

	EXIT_LEFT,
	EXIT_RIGHT,
	EXIT_UP,
	EXIT_DOWN,
};

enum ROOM_FLOOR_TILE
{
	ROOMS_FLOORTILE = 162,
	BLUE_FLOORTILE = 49,
	MAINMENU_FLOORTILE = 768,
	MECH_FLOORTILE = 356,
	RED_FLOORTILE = 813,
	SIGHT_TWO_FLOORTILE_FIRST = 4,
	SIGHT_TWO_FLOORTILE_LAST = 639,
};

enum SCENERY_TILES_IGNORE
{
	BLUE_TILEBLOOD = 488,
	BLUE_TILEBODY1 = 103,
	BLUE_TILEDEBRIS1 = 135,

	BLUE_TILEYELLOWBUTTON = 303,
	BLUE_TILEREDBUTTON = 271,
	BLUE_TILEPURPLEBUTTON = 239,
	BLUE_TILEGRAYBUTTON = 335,
		
	BLUE_TILEYELLOWBLOCK_OFF = 198,
	BLUE_TILEREDBLOCK_OFF = 229,
	BLUE_TILEPURPLEBLOCK_OFF = 230,
	BLUE_TILEGRAYBLOCK_OFF = 197,

	BLUE_FINISHTILE = 101,

	BLUE_LOCKERHIDE = 429,
	BLUE_LOCKERHIDE2 = 461,

	BLUE_TILEDEBRIS2 = 144,
	BLUE_TILEDEBRIS3 = 145,
	BLUE_TILEDEBRIS4 = 146,
	BLUE_TILEDEBRIS5 = 147,
	BLUE_TILEDEBRIS6 = 148,
	BLUE_TILEDEBRIS7 = 149,

	BLUE_DOORTILE1 = 792,
	BLUE_DOORTILE2 = 793,
	BLUE_DOORTILE3 = 824,
	BLUE_DOORTILE4 = 825,
	BLUE_DOORTILE5 = 874,
	BLUE_DOORTILE6 = 971,
	BLUE_DOORTILE7 = 708,
	BLUE_DOORTILE8 = 709,

	BLUE_TILEDEBRIS8 = 117,
	BLUE_TILEDEBRIS9 = 116,

	BLUE_IGNORETOTAL = 30,

	MAINMENU_TILEBLOOD = 235,
	MAINMENU_TILEDEBRIS1 = 237,
	MAINMENU_TILEDEBRIS2 = 238,
	MAINMENU_TILEDEBRIS3 = 175,
	MAINMENU_TILEDEBRIS4 = 206,
	MAINMENU_TILEDEBRIS5 = 207,
	MAINMENU_TILEDEBRIS6 = 238,
	MAINMENU_TILEDEBRIS7 = 174,

	MAINMENU_IGNORETOTAL = 8,
};

enum SCHOOL_TILES_IGNORE
{
	SCHOOL_FLOORTILE_1 = 16,
	SCHOOL_FLOORTILE_2 = 17,
	SCHOOL_FLOORTILE_3 = 18,
	SCHOOL_FLOORTILE_4 = 19,
	SCHOOL_FLOORTILE_5 = 20,
	SCHOOL_FLOORTILE_6 = 21,
	SCHOOL_FLOORTILE_7 = 48,
	SCHOOL_FLOORTILE_8 = 49,
	SCHOOL_FLOORTILE_9 = 50,
	SCHOOL_FLOORTILE_10 = 80,
	SCHOOL_FLOORTILE_11 = 81,
	SCHOOL_FLOORTILE_12 = 82,
	SCHOOL_FLOORTILE_13 = 812,
	SCHOOL_FLOORTILE_14 = 813,
	SCHOOL_FLOORTILE_15 = 1033,
	SCHOOL_FLOORTILE_16 = 1039,
	SCHOOL_FLOORTILE_17 = 1225,
	SCHOOL_FLOORTILE_18 = 1231,

	SCHOOL_FLOORTOTAL = 18,

	SCHOOL_FLOORTILE_DEBRIS_1 = 22,
	SCHOOL_FLOORTILE_DEBRIS_2 = 24,
	SCHOOL_FLOORTILE_DEBRIS_3 = 116,
	SCHOOL_FLOORTILE_DEBRIS_4 = 117,
	SCHOOL_FLOORTILE_DEBRIS_5 = 148,
	SCHOOL_FLOORTILE_DEBRIS_6 = 149,
	SCHOOL_FLOORTILE_DEBRIS_7 = 150,
	SCHOOL_FLOORTILE_DEBRIS_8 = 151,
	SCHOOL_FLOORTILE_DEBRIS_9 = 54,
	SCHOOL_FLOORTILE_DEBRIS_10 = 406,
	SCHOOL_FLOORTILE_DEBRIS_11 = 51,
	SCHOOL_FLOORTILE_DEBRIS_12 = 52,
	SCHOOL_FLOORTILE_DEBRIS_13 = 53,
	SCHOOL_FLOORTILE_DEBRIS_14 = 83,
	SCHOOL_FLOORTILE_DEBRIS_15 = 84,
	SCHOOL_FLOORTILE_DEBRIS_16 = 85,
	SCHOOL_FLOORTILE_DEBRIS_17 = 349,
	SCHOOL_FLOORTILE_DEBRIS_18 = 381,
	SCHOOL_FLOORTILE_DEBRIS_19 = 413,
	SCHOOL_FLOORTILE_DEBRIS_20 = 445,
	SCHOOL_FLOORTILE_DEBRIS_21 = 477,
	SCHOOL_FLOORTILE_DEBRIS_22 = 346,
	SCHOOL_FLOORTILE_DEBRIS_23 = 378,
	SCHOOL_FLOORTILE_DEBRIS_24 = 410,
	SCHOOL_FLOORTILE_DEBRIS_25 = 442,
	SCHOOL_FLOORTILE_DEBRIS_26 = 474,
	SCHOOL_FLOORTILE_DEBRIS_27 = 66,
	SCHOOL_FLOORTILE_DEBRIS_28 = 67,
	SCHOOL_FLOORTILE_DEBRIS_29 = 68,
	SCHOOL_FLOORTILE_DEBRIS_30 = 64,
	SCHOOL_FLOORTILE_DEBRIS_31 = 488,

	SCHOOL_DOORFRAME_RIGHT = 874,
	SCHOOL_DOORFRAME_LEFT = 971,

	SCHOOL_DEBRISTOTAL = 33,

	SCHOOL_IGNORETOTAL ,
};

enum SCENERY_TILES_COLLISIONDATA
{
	COLLISION_BLUE_TILEBLOOD = 0,
	COLLISION_BLUE_TILEBODY1 = 0,
	COLLISION_BLUE_TILEDEBRIS1 = 0,

	COLLISION_BLUE_TILEYELLOWBUTTON = 10,
	COLLISION_BLUE_TILEREDBUTTON = 11,
	COLLISION_BLUE_TILEPURPLEBUTTON = 12,
	COLLISION_BLUE_TILEGRAYBUTTON = 13,
		
	COLLISION_BLUE_TILEYELLOWBLOCK_OFF = 0,
	COLLISION_BLUE_TILEREDBLOCK_OFF = 0,
	COLLISION_BLUE_TILEPURPLEBLOCK_OFF = 0,
	COLLISION_BLUE_TILEGRAYBLOCK_OFF = 0,
	
	COLLISION_BLUE_FINISHTILE = 14,

	COLLISION_BLUE_LOCKERHIDE = 201,
	COLLISION_BLUE_LOCKERHIDE2 = 200,

	COLLISION_BLUE_TILEDEBRIS2 = 0,
	COLLISION_BLUE_TILEDEBRIS3 = 0,
	COLLISION_BLUE_TILEDEBRIS4 = 0,
	COLLISION_BLUE_TILEDEBRIS5 = 0,
	COLLISION_BLUE_TILEDEBRIS6 = 0,
	COLLISION_BLUE_TILEDEBRIS7 = 0,

	COLLISION_BLUE_DOORTILE1 = 0,
	COLLISION_BLUE_DOORTILE2 = 0,
	COLLISION_BLUE_DOORTILE3 = 0,
	COLLISION_BLUE_DOORTILE4 = 0,
	COLLISION_BLUE_DOORTILE5 = 0,
	COLLISION_BLUE_DOORTILE6 = 0,
	COLLISION_BLUE_DOORTILE7 = 0,
	COLLISION_BLUE_DOORTILE8 = 0,

	COLLISION_BLUE_TILEDEBRIS8 = 0,
	COLLISION_BLUE_TILEDEBRIS9 = 0,

	COLLISION_MAINMENU_TILEBLOOD = 0,
	COLLISION_MAINMENU_TILEDEBRIS1 = 0,
	COLLISION_MAINMENU_TILEDEBRIS2 = 0,
	COLLISION_MAINMENU_TILEDEBRIS3 = 0,
	COLLISION_MAINMENU_TILEDEBRIS4 = 0,
	COLLISION_MAINMENU_TILEDEBRIS5 = 0,
	COLLISION_MAINMENU_TILEDEBRIS6 = 0,
	COLLISION_MAINMENU_TILEDEBRIS7 = 0,

	COLLISION_SCHOOL_FLOORTILE_DEBRIS_1 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_2 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_3 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_4 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_5 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_6 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_7 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_8 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_9 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_10 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_11 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_12 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_13 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_14 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_15 = 0,
	COLLISION_SCHOOL_FLOORTILE_DEBRIS_16 = 0,
	COLLISION_SCHOOL_DOORFRAME_RIGHT = 0,
	COLLISION_SCHOOL_DOORFRAME_LEFT = 0,
};

enum INTERACTIVE_TILES
{
	BLUE_TILEYELLOWBLOCK = 173,
	BLUE_TILEREDBLOCK = 204,
	BLUE_TILEPURPLEBLOCK = 205,
	BLUE_TILEGRAYBLOCK = 172,

	MAINMENU_PILLOWBEDTOP = 342,
	MAINMENU_PILLOWBEDBOTTOM = 374,
	MAINMENU_PILLOWLESSBEDTOP = 343,
	MAINMENU_PILLOWLESSBEDBOTTOM = 375,

	RED_TABLE_TILE1 = 106,
	RED_TABLE_TILE2 = 107,
	RED_TABLE_TILE3 = 138,
	RED_TABLE_TILE4 = 139,
	RED_CHAIR_TILE = 75,
};

enum TILE_CORRIDOR
{
	TILE_CORRIDOR_FLOOR = 983,
	TILE_CORRIDOR_TOP_WALL = 1018,
	TILE_CORRIDOR_BOTTOM_WALL = 1016,
	TILE_CORRIDOR_LEFT_WALL = 1019,
	TILE_CORRIDOR_RIGHT_WALL = 1017,
	TILE_CORRIDOR_TOP_LEFT_CORNER = 1023,
	TILE_CORRIDOR_TOP_RIGHT_CORNER = 1020,
	TILE_CORRIDOR_BOTTOM_LEFT_CORNER = 1022,
	TILE_CORRIDOR_BOTTOM_RIGHT_CORNER = 1021,
	TILE_CORRIDOR_INNER_TOP_LEFT_CORNER = 989,
	TILE_CORRIDOR_INNER_TOP_RIGHT_CORNER = 990,
	TILE_CORRIDOR_INNER_BOTTOM_LEFT_CORNER = 988,
	TILE_CORRIDOR_INNER_BOTTOM_RIGHT_CORNER = 991
}; 

struct Room_Exit
{
	Room_Exit(EXIT_DIRECTION exitDirection, ROOM_TYPE roomType = ROOM_NULL, int roomID = 0, int exitPositionX = 0, int exitPositionY = 0)
	{
		this->exitDirection = exitDirection;
		this->exitPositionX = exitPositionX;
		this->exitPositionY = exitPositionY;
		this->roomType = roomType;
		this->roomID = roomID;
		this->connected = false;
	}

	~Room_Exit()
	{
	}

	bool connected;
	int roomID;
	ROOM_TYPE roomType;
	EXIT_DIRECTION exitDirection;
	int exitPositionX;
	int exitPositionY;
};

struct RoomExitYLessThan
{
public:
	bool operator()(const Room_Exit* a, const Room_Exit* b)
	{
		return (a->exitPositionY < b->exitPositionY);
	}
};

struct Room_Object
{
	enum ROOM_OBJECT_TYPE
	{
		ROOM_OBJECT_TESTPUZZLE_BED,
		ROOM_OBJECT_TESTPUZZLE_MEDIUM_TABLE,
		ROOM_OBJECT_TESTPUZZLE_SMALL_TABLE,
		ROOM_OBJECT_TESTPUZZLE_CHAIR_SLANT_LEFT,
		ROOM_OBJECT_TESTPUZZLE_CHAIR_SLANT_RIGHT,
		ROOM_OBJECT_TESTPUZZLE_WHITE_TABLECLOTH_TABLE,
		ROOM_OBJECT_TESTPUZZLE_BIG_WINDOW,
		ROOM_OBJECT_TESTPUZZLE_SMALL_WINDOW,
		ROOM_OBJECT_TESTPUZZLE_GLASS_CABINET,
		ROOM_OBJECT_TESTPUZZLE_PATTERNED_FLOOR,

		// Exits
		ROOM_OBJECT_TESTPUZZLE_CLOSED_EXIT_BOTTOM,
		ROOM_OBJECT_TESTPUZZLE_OPEN_EXIT_BOTTOM,

		//Stuff on white tablecloth table
		ROOM_OBJECT_TESTPUZZLE_BRONZE_GLOBE,
		ROOM_OBJECT_TESTPUZZLE_BRONZE_CANDLESTICK,
		ROOM_OBJECT_TESTPUZZLE_BRONZE_BOTTLE,
		ROOM_OBJECT_TESTPUZZLE_OPEN_BOOK,

		//Friend Night objects
		ROOM_OBJECT_FRIEND,

		//AHMAD room things
		ROOM_OBJECT_MECH_FACTORY_PIPES,
		ROOM_OBJECT_MECH_CURVE_PIPES,
		ROOM_OBJECT_MECH_WALL_PIPES,
		ROOM_OBJECT_MECH_HOSE_PIPE,
		ROOM_OBJECT_MECH_ROCK_WALL,
		ROOM_OBJECT_MECH_ROCK_RIGHT,
		ROOM_OBJECT_MECH_ROCK_LEFT,
		ROOM_OBJECT_MECH_ENGINE,
		ROOM_OBJECT_MECH_LEFT_DOOR,
		ROOM_OBJECT_MECH_RIGHT_DOOR,

		
	};

	Room_Object(ROOM_OBJECT_TYPE objectType, int roomHeight, int roomWidth);
	~Room_Object();
	

	ROOM_OBJECT_TYPE type;
	int width, height;
	int lowerOriginX, upperOriginX;
	int lowerOriginY, upperOriginY;
};

class Room : public CMap
{
public:
	Room(
		ROOM_TYPE roomType, 
		const int theScreen_Height, 
		const int theScreen_Width, 
		const int theNumOfTiles_Height, 
		const int theNumOfTiles_Width, 
		const int theMap_Height, 
		const int theMap_Width, 
		const int theTileSize, 
		const TILESET_ID tileset,
		const int worldPositionX,
		const int worldPositionY,
		const int roomID);
	~Room(void);

	void addOBJtoGenerate(Room_Object* object);

	int getWorldPositionX();
	int getWorldPositionY();

	unsigned getExitSize();
	Room_Exit* getExit(int index);

	ROOM_TYPE getRoomType();

	void generateRoom(); // Add objects and collision based on roomType
	bool addObject(ROOM_TYPE type, Room_Object* object, int originX, int originY); // Add specific object to room based on position and type (origin top left)
	void addExit(EXIT_DIRECTION exit); // Adds exit to room
private:
	void reset_mapData(); // Reset map values
	bool attemptToAdd(ROOM_TYPE roomType, Room_Object* object);

	int roomID;
	std::vector<Room_Object*> roomObjectList; // Stores all objects to be added during generateRoom()
	int attemptCounter; // Stores number of times object in room was attempted to be generated.
	int exitCounter; // Stores number of exits generated
	int worldPositionX, worldPositionY; // Position of the room in world (bottom left)
	ROOM_TYPE roomType; // Stores room type
	std::vector<Room_Exit* > numExit; // Stores direction of each exit, and number of exits [ .size() ]
};

#endif